@import "mixins";
@import "theme";

body {
  margin: 0;
  font-family: Lato, -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",
    "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--page-bg-color);
  color: var(--main-text-color);
}

// reset some common elements
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol {
  margin: 0;
  padding: 0;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
}

ul,
ol {
  list-style: none;
}

.link {
  color: var(--brand-text-color);
  border: 0;
  background: none;
  padding: 0;
  display: inline;
  text-decoration: none;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  cursor: pointer;

  &:hover {
    color: var(--brand-text-hover-color);
    text-decoration: underline;
  }

  &--invert {
    color: var(--invert-text-color);

    &:hover {
      color: var(--invert-text-color);
      text-decoration: underline;
    }
  }
}

.btn {
  color: var(--invert-text-color);
  background: var(--brand-bg-color);
  border: 2px solid var(--brand-bg-color);
  font-size: 1rem;
  font-weight: 700;
  line-height: 1.5;
  text-transform: uppercase;
  padding: 0.5em 1em;
  margin: 0;
  border-radius: 0.25em;
  cursor: pointer;
  outline: none;
  transition: background-color 0.2s ease, box-shadow 0.2s ease; // TODO: determine global transition default

  &:hover:not(.btn--disabled):not([disabled]) {
    background-color: var(--brand-bg-hover-color);
    border-color: var(--brand-bg-hover-color);
  }

  &:active:not(.btn--disabled):not([disabled]) {
    box-shadow: var(--shadow-default);
  }

  &:focus-visible {
    outline: unset; // TODO: determine global focus states
  }

  &[disabled],
  &--disabled {
    color: var(--disabled-color);
    background-color: var(--disabled-contrast-color);
    border-color: var(--disabled-contrast-color);
    cursor: default;
  }
}

.btn--outline {
  color: var(--brand-text-color);
  background-color: var(--main-bg-color);

  &:hover:not(.btn--disabled):not([disabled]) {
    background-color: var(--main-bg-color);
    color: var(--brand-text-hover-color);
  }

  &:active:not(.btn--disabled):not([disabled]) {
    border-color: var(--main-text-color);
    color: var(--main-text-color);
  }

  &[disabled],
  &.btn--disabled {
    background-color: var(--main-bg-color);
    border-color: var(--disabled-color);
    color: var(--disabled-color);
  }
}

.bg-brand {
  background: linear-gradient(
    to top right,
    var(--brand-gradient-start),
    var(--brand-gradient-end)
  );
}

.text-invert {
  color: var(--invert-text-color);
}

.container {
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--window-side-padding);
  padding-right: var(--window-side-padding);
}

.card-grid {
  display: grid;
  grid-template-columns: 1fr;
  grid-gap: 2.5rem;

  @media (min-width: 408px) {
    grid-template-columns: repeat(auto-fill, 360px);
  }

  > * {
    max-width: 22.5rem;
    min-height: 256px;
  }
}

.card {
  display: flex;
  flex-direction: column;
  padding: 1rem;
  background-color: var(--card-bg);
  color: var(--main-text-color);
  border-radius: 0.5rem;
  box-shadow: var(--card-shadow);
  transition: box-shadow 0.2s ease; // TODO: determine global transition default

  &:hover {
    box-shadow: var(--card-shadow-active);
  }
}

.card__actions {
  margin-top: auto;
}

.hdg {
}

.hdg--1 {
  font-size: 3rem;
  line-height: (72 / 48);
  font-weight: 700;
}

.hdg--2 {
  font-size: 2rem;
  line-height: (48 / 32);
  font-weight: 300;

  &.hdg--scale-from-3 {
    @include clamp-font-size(20, 32);
  }
}

.hdg--3 {
  font-size: 1.25rem;
  line-height: (24 / 20);
  font-weight: 400;

  &.hdg--scale-from-body {
    @include clamp-font-size(16, 20);
  }
}

.scaling-header {
  padding-top: get-clamp-val(48, 80);
  padding-bottom: var(--scaling-header-padding);
}

$spacings: (
  "mt": "margin-top",
  "mb": "margin-bottom",
  "pt": "padding-top",
  "pb": "padding-bottom",
);

@each $abbr, $prop in $spacings {
  @for $i from 1 through 2 {
    .#{$abbr}-scale-#{$i} {
      #{$prop}: var(--scaling-space-#{$i});
    }
  }
}
